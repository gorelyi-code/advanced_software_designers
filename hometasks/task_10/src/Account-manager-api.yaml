openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: user_manager
    description: Operations about user
paths:

  /user/login:
    post:
      tags:
        - user_manager
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        description: Login post params
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username/password supplied
          
  /user/logout:
    get:
      tags:
        - user_manager
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
          
  /user/createNewAccount:
    post:
      tags:
        - user_manager
      summary: create new account
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters: []
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          
  /user/changeUserRole:
    put:
      tags:
        - user_manager
      summary: Change user role
      description: This can only be done by the logged in user.
      operationId: changeUserRole
      parameters:
        - name: username
          in: query
          description: name that need to be deleted
          required: true
          schema:
            type: string
        - name: role
          in: query
          description: name that need to be deleted
          required: true
          schema:
            type: string
            enum : ["user", "admin"]
      responses:
        default:
          description: successful operation
          
  /user/deleteAccount:
    delete:
      tags:
        - user_manager
      summary: Delete user password
      description: This can only be done by the logged in user.
      operationId: deletAccount
      parameters:
        - name: username
          in: query
          description: name that need to be deleted
          required: true
          schema:
            type: string

      responses:
        default:
          description: successful operation
          
  /user/recoveryPassword:
    get:
      tags:
        - user_manager
      summary: Recovery user password
      description: This can only be done by the logged in user.
      operationId: recoveryPassword
      parameters:
        - name: username
          in: query
          description: name that need to be deleted
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          
  /user/changePassword:
    put:
      tags:
        - user_manager
      summary: Change user password
      description: This can only be done by the logged in user.
      operationId: changePassword
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chPasswd'
      responses:
        default:
          description: successful operation
          


components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Login:
      type: object
      properties:
        login:
          type: string
          example: theUser
        password:
          type: string
          example: '12345'
      xml:
        name: user
    chPasswd:
      type: object
      properties:
        oldPasswd:
          type: string
          example: '123123'
        newPasswd:
          type: string
          example: '12345'
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'